You might have noticed a problem with the above image ? Depending on the order in which the triangles appear in an OBJ file (and the order you store them in your code), rendered triangles can sometimes overlap each other inappropriately. For example, in the image shown in the previous task, the blue box is shown overlapping the red one - which is not the case in the true model. View the slides and narrated audio above to understand what causes this problem and what we can do to solve it.

In your code, create a 2D array of floats (the dimensions of the array being the same width and height as the image plane / drawing window). You are going to use this array to keep track of the z depth of the model element drawn for each pixel on the screen. The data stored in this "depth buffer" will allow us to decide what colour to paint a pixel when there is contention. It is important that we use the _**inverse**_ of the z depth (i.e. `1/Z`) of the model element represented. This is to take into account the effects of perspective in the rendered image (this will be explored in more detail in a later session).

When filling the depth buffer, you need to calculate the inverse z depth of specific points on the surface of a triangle. It is worth observing that you do not actually _have_ depth information for all these points. These depths can however be calculated by interpolating the depths of known points (i.e. the vertices). Watch the animation linked to at the top of this section for help on achieving this.

Use your depth buffer in your drawing functions to help decide what colour to set a particular image plane pixel. In some cases the first colour you draw a pixel will be the correct one, in other cases this colour will need to be overwritten by a subsequent colour. If your depth buffer is operating correctly, you should see something like the left-hand image shown below.

In order to check that you are correctly interpolation the Z depth, reposition your camera downwards (so that you can see underneath the Cornell Box model). If your code is working correctly, you should NOT see a significant proportion of red and/or blue box peeking through the floor. Your aim is to achieve a render like that shown in the bottom right - if your render looks like the top right, then your interpolation is incorrect. It is not unusual to sometimes see _a little_ red/blue peeking, but it should not be to the extent as shown below - ask in the lab if you are unsure.